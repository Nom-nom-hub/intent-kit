name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools_scm

      - name: Build package
        run: python -m build

      - name: Generate release notes
        shell: bash
        run: |
          # Extract release notes from CHANGELOG.md
          sed -n '/^## \[0\./,/^## \[0\./p' CHANGELOG.md | sed '2,$p' | head -n -1 > release_notes.txt
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat release_notes.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

  publish-templates:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create templates release assets from project templates
        shell: bash
        run: |
          # Create template archives from the templates directory
          if [ -d "templates" ]; then
            tar -czf intent-kit-templates-${{ env.VERSION }}.tar.gz -C . templates
            zip -r intent-kit-templates-${{ env.VERSION }}.zip templates/
          else
            echo "No templates directory found to create templates from"
            # Create empty archives as placeholders
            tar -czf intent-kit-templates-${{ env.VERSION }}.tar.gz --files-from=/dev/null
            zip -r intent-kit-templates-${{ env.VERSION }}.zip templates/ || mkdir -p templates && zip -r intent-kit-templates-${{ env.VERSION }}.zip templates/
          fi

      - name: Upload templates to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: intent-kit-templates-${{ env.VERSION }}.tar.gz
          asset_name: intent-kit-templates-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload templates zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: intent-kit-templates-${{ env.VERSION }}.zip
          asset_name: intent-kit-templates-${{ env.VERSION }}.zip
          asset_content_type: application/zip

  publish-cli:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Extract CLI executable
        run: |
          pip install dist/*.whl
          # Make sure the intent command is available
          intent --version

      - name: Upload Python wheel to release
        uses: svenstaro/upload-release-asset@v2
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/intent-kit-${{ env.VERSION }}-py3-none-any.whl
          asset_name: intent-kit-${{ env.VERSION }}-py3-none-any.whl
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}